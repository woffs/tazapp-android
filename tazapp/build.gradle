def versionMajor = 3
def versionMinor = 11
def versionPatch = 4
def versionBuild = 0

def buildToolsVer = "28.0.3"
def compileSdkVer = 28
def targetSdkVer = 28
def minSdkVer = 16

def tazPlist = '"https://dl.taz.de/tpaperIssue.plist"'
def tazPlistArchiv = '"https://dl.taz.de/tpaperIssue.plist?start=%1$s&end=%2$s"'
def tazStagingPlist = '"https://dl.taz.de/tpaperIssueTest.plist"'
def tazStagingPlistArchiv = '"https://dl.taz.de/tpaperIssueTest.plist?start=%1$s&end=%2$s"'
def tazAboUrl = '"https://www.taz.de/zeitung/abo/digitales-abo/apaper"'
def tazCheckLogin = '"https://dl.taz.de/digiAboCheckLogin"'
def tazResourceUrl = '"https://dl.taz.de/ressourcen"'
def tazArchiveUrl = '"https://dl.taz.de/tpaperArchiv"'
def tazPushRestUrl = '"https://dl.taz.de/tpaperPushInfo"'
def tazStagingPushRestUrl = '"https://dl.taz.de/tpaperPushInfoTest"'
def tazErrorMail = '"app-fdroid@taz.de"'

def lmdPlist = '"https://dl.monde-diplomatique.de/tpaperIssue.plist"'
def lmdPlistArchiv = '"https://dl.monde-diplomatique.de/tpaperIssue.plist?start=%1$s&end=%2$s"'
def lmdStagingPlist = '"https://dl.monde-diplomatique.de/tpaperIssueTest.plist"'
def lmdStagingPlistArchiv = '"https://dl.monde-diplomatique.de/tpaperIssueTest.plist?start=%1$s&end=%2$s"'
def lmdAboUrl = '"https://monde-diplomatique.de/abo-digital"'
def lmdCheckLogin = '"https://dl.monde-diplomatique.de/digiAboCheckLogin"'
def lmdResourceUrl = '"https://dl.monde-diplomatique.de/ressourcen"'
def lmdArchiveUrl = '"https://dl.monde-diplomatique.de/tpaperArchiv"'
def lmdPushRestUrl = '"https://dl.monde-diplomatique.de/tpaperPushInfo"'
def lmdStagingPushRestUrl = '"https://dl.monde-diplomatique.de/tpaperPushInfoTest"'
def lmdErrorMail = '"app@monde-diplomatique.de"'

def plistUrl = "PLISTURL"
def plistArchiveUrl = "PLISTARCHIVURL"
def aboUrl = "ABOURL"
def checkLoginUrl = "CHECKLOGINURL"
def resourceUrl = "RESOURCEURL"
def archiveUrl = "ARCHIVEURL"
def pushRestUrl = "PUSHRESTURL"
def errorMail = "ERRORMAIL"

apply plugin: 'idea'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.akaita.android.easylauncher'
apply plugin: 'kotlin-kapt'

easylauncher {
    iconNames "@mipmap/ic_launcher_foreground" // Traditional launcher icon
    foregroundIconNames "@mipmap/ic_launcher_foreground" // Foreground of adaptive launcher icon
    buildTypes {
        debug {
            filters = customColorRibbonFilter("Debug", "#FFCA1B", "#003645", "topLeft", 0.13)
        }
        staging {
            filters = customColorRibbonFilter("Testing", "#b3d7ff", "#003645", "topLeft", 0.13)
        }
        release {
            enable false
        }
    }
}

android {

    sourceSets {
        staging {
            java {
                srcDir 'src/debug/java'
            }
        }
    }
    androidExtensions {
        experimental = true
    }

    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer
    defaultConfig {
        vectorDrawables {
            useSupportLibrary = true
        }
        multiDexEnabled true
        resConfigs "en", "de"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex        : 'de.thecode.android.tazreader.eventbus.EventBusIndex',
                             "room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    splits {
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true

        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/atomicfu.kotlin_module'
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            debuggable true
            versionNameSuffix " Debug"
            applicationIdSuffix ".debug"
        }
        staging.initWith(buildTypes.debug)
        staging {
            versionNameSuffix " Staging"
            applicationIdSuffix ".staging"
        }
        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    flavorDimensions "publication"

    productFlavors {
        taz {
            dimension "publication"
            applicationId "de.thecode.android.tazreader"
            resValue 'string', 'app_name', 'taz.app'
            buildConfigField 'String', plistUrl, tazPlist
            buildConfigField 'String', plistArchiveUrl, tazPlistArchiv
            buildConfigField 'String', aboUrl, tazAboUrl
            buildConfigField 'String', checkLoginUrl, tazCheckLogin
            buildConfigField 'String', resourceUrl, tazResourceUrl
            buildConfigField 'String', archiveUrl, tazArchiveUrl
            buildConfigField 'String', pushRestUrl, tazPushRestUrl
            buildConfigField 'String', pushRestUrl, tazPushRestUrl
            buildConfigField 'String', errorMail, tazErrorMail
        }
        lmd {
            dimension "publication"
            applicationId "de.thecode.lmd"
            resValue 'string', 'app_name', 'LMd'
            buildConfigField 'String', plistUrl, lmdPlist
            buildConfigField 'String', plistArchiveUrl, lmdPlistArchiv
            buildConfigField 'String', aboUrl, lmdAboUrl
            buildConfigField 'String', checkLoginUrl, lmdCheckLogin
            buildConfigField 'String', resourceUrl, lmdResourceUrl
            buildConfigField 'String', archiveUrl, lmdArchiveUrl
            buildConfigField 'String', pushRestUrl, lmdPushRestUrl
            buildConfigField 'String', errorMail, lmdErrorMail
        }
    }

    applicationVariants.all { variant ->
        def appName = variant.mergedFlavor.resValues.get('app_name').getValue()
        appName = "${appName}"
        if (!variant.buildType.name.equalsIgnoreCase("release")) {
            appName += " " + variant.buildType.name.toUpperCase()
        }
        variant.resValue 'string', 'app_name', appName
        if (variant.buildType.name.equalsIgnoreCase("staging")) {
            variant.getProductFlavors().each { flavor ->
                if (flavor.name.equalsIgnoreCase('taz')) {
                    variant.buildConfigField 'String', plistUrl, tazStagingPlist
                    variant.buildConfigField 'String', plistArchiveUrl, tazStagingPlistArchiv
                    variant.buildConfigField 'String', pushRestUrl, tazStagingPushRestUrl
                } else if (flavor.name.equalsIgnoreCase('lmd')) {
                    variant.buildConfigField 'String', plistUrl, lmdStagingPlist
                    variant.buildConfigField 'String', plistArchiveUrl, lmdStagingPlistArchiv
                    variant.buildConfigField 'String', pushRestUrl, lmdStagingPushRestUrl
                }

            }
        }
    }

    def abiCodes = ['universal': 0, 'armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 4, 'mips64': 5, 'x86': 6, 'x86_64': 7].withDefault {
        0
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
            output.versionCodeOverride = baseAbiVersionCode * 100000000 + variant.versionCode
            output.versionNameOverride = variant.versionName + "+fdroid+" + abiCodes.find { it.value == baseAbiVersionCode }.key
        }
    }

    productFlavors.all { flavor ->
        def helpDir = new File(project.projectDir, "src/${flavor.name}/assets/help")
        def localZip = new File("temp_${flavor.name}.zip")
        def helpDownloadTaskName = "helpDownloadFile${flavor.name.capitalize()}"
        def helpUnzipTaskName = "helpUnzipFile${flavor.name.capitalize()}"
        def helpDeleteZipTaskName = "helpDeleteZipFile${flavor.name.capitalize()}"
        def helpDeleteDirTaskName = "helpDeleteDir${flavor.name.capitalize()}"
        def downloadTask = task "${helpDownloadTaskName}"(type: Download) {
            sourceUrl = "https://dl.taz.de/down/help/${flavor.name}.zip"
            target = localZip
        }
        def deleteZipTask = task "${helpDeleteZipTaskName}"(type: Delete) {
            delete localZip
        }
        def deleteHelpDirTask = task "${helpDeleteDirTaskName}"(type: Delete) {
            delete helpDir
        }
        def unzipTask = task "${helpUnzipTaskName}"(dependsOn: [downloadTask, deleteHelpDirTask], type: Copy) {
            from zipTree(downloadTask.target)
            into helpDir
        }
        unzipTask.finalizedBy deleteZipTask
        tasks.preBuild.dependsOn unzipTask
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
    jcenter()
    google()
}

dependencies {
    def okhttp_version = "3.12.0" // from 3.14 only Android 5 (Api21) is supported
    def lifecycle_version = "2.2.0"
    def coroutines_version = "1.1.1"
    def material_dialogs_version = "2.6.0"
    def picasso_version = "2.5.2"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation "com.google.android.material:material:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.takisoft.preferencex:preferencex:1.1.0"

    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    implementation "com.squareup.picasso:picasso:$picasso_version"
    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    implementation 'com.googlecode.plist:dd-plist:1.21'
    implementation 'com.commonsware.cwac:provider:0.5.3'
    implementation 'org.greenrobot:eventbus:3.1.1'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.0.1'
    kapt 'org.greenrobot:eventbus-annotation-processor:3.0.1'
    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    stagingImplementation 'com.facebook.stetho:stetho:1.5.1'
    stagingImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    implementation 'com.github.jrejaud:ViewPagerIndicator2:0.0.1'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.yqritc:recyclerview-flexibledivider:1.2.9'
    implementation 'com.scottyab:aescrypt:0.0.1'
    implementation 'com.github.matecode:Snacky:a7a29094'
    implementation('com.github.matecode:androiddialog:1.3.36')
//    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'

    implementation "androidx.room:room-runtime:2.2.4"
    annotationProcessor "androidx.room:room-compiler:2.2.4"
    kapt "androidx.room:room-compiler:2.2.4"

    implementation "org.apache.commons:commons-lang3:3.9"
    implementation 'com.github.bosphere.android-filelogger:filelogger:1.0.6'

    implementation "android.arch.work:work-runtime:1.0.1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.afollestad.material-dialogs:core:$material_dialogs_version"

    implementation 'androidx.multidex:multidex:2.0.1' //Remove after Migration of Dialogs maybe

    implementation "org.jetbrains.anko:anko-commons:0.10.8"

    implementation 'com.github.ajalt:timberkt:1.5.1'

    implementation 'org.apache.commons:commons-compress:1.12' // JAVA 6 compatible, DO NOT UPDATE

    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.2'
}

class Download extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

//apply plugin: 'com.google.gms.google-services'
